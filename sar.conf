filter {

if [taskId] == "Sar" {
    ruby {
        code => "event.set('message',event.get('message').split(/\n/))"
    }
    split {
        field => "message"
    }
    if [message] =~ "^\* \w+ \w+ " {
        grok {
            patterns_dir => "/elastic/logstash/config/patterns/"
            match => { "message" => "\* %{SAR_TIMESTAMP:logtime} %{GREEDYDATA}" }
        }
        aggregate {
          task_id => "%{taskId}"
          code => "map['logtime'] = event.get('logtime')"
        }
        #drop { }
    }
    if [message] =~ "^=======" {
        drop { }
    }
    if [message] =~ "^-------" {
        drop { }
    }
    if [message] =~ "^* TOT" {
        drop { }
    }
    if [message] =~ "^* Node" {
        drop { }
    }
    if [message] =~ "^* MB" {
        drop { }
    }
    if [message] =~ "^\w+:" {
        grok {
            patterns_dir => "./patterns"
            match => { "message" => ["%{WORD:hostname}:%{SPACE}%{NUMBER:cpu.user}%{SPACE}%{NUMBER:cpu.sys}%{SPACE}%{NUMBER:cpu.wait}%{SPACE}%{NUMBER:cpu.idle}%{SPACE}%{NUMBER:cpu.runq}\|%{SPACE}%{NUMBER:memory.used}%{SPACE}%{NUMBER:memory.real}%{SPACE}%{NUMBER:memory.swap}\|%{SPACE}%{NUMBER:ether.rcv_size}%{SPACE}%{NUMBER:ether.rcv_packet}%{SPACE}%{NUMBER:ether.tran_size}%{SPACE}%{NUMBER:ether.tran_packet}\|%{SPACE}%{NUMBER:infini.tcp_rcv}%{SPACE}%{NUMBER:infini.tcp_tran}%{SPACE}%{NUMBER:infini.rds_rcv}%{SPACE}%{NUMBER:infini.rds_tran}%{SPACE}%{NUMBER:infini.total_rcv}%{SPACE}%{NUMBER:infini.total_tran}",
                                     "%{WORD:hostname}:%{SPACE}%{NUMBER:cell.io.total}\|%{SPACE}%{NUMBER:cell.io.disk.read}%{SPACE}%{NUMBER:cell.io.disk.write}%{SPACE}%{NUMBER:cell.io.disk.avg}%{SPACE}%{NUMBER:cell.io.disk.max}%{SPACE}%{NUMBER:cell.io.disk.tps}%{SPACE}%{NUMBER:cell.io.disk.svctm}\|%{SPACE}%{NUMBER:cell.io.flash.read}%{SPACE}%{NUMBER:cell.io.flash.write}%{SPACE}%{NUMBER:cell.io.flash.avg}%{SPACE}%{NUMBER:cell.io.flash.max}%{SPACE}%{NUMBER:cell.io.flash.tps}%{SPACE}%{NUMBER:cell.io.flash.svctm}\|%{SPACE}%{NUMBER:cell.cpu}\|%{SPACE}%{NUMBER:cell.infini.rcv}%{SPACE}%{NUMBER:cell.infini.tran}"]
                    }
        }
        aggregate {
          task_id => "%{taskId}"
          code =>  "event.set('logtime', map['logtime'])"
          map_action => "update"
        }
    }
    mutate {
      convert => { "cpu.user" => "float" }
      convert => { "cpu.sys" => "float" }
      convert => { "cpu.wait" => "float" }
      convert => { "cpu.idle" => "float" }
      convert => { "cpu.runq" => "float" }
      convert => { "memory.used" => "float" }
      convert => { "memory.real" => "float" }
      convert => { "memory.swap" => "float" }
      convert => { "ether.rcv_size" => "float" }
      convert => { "ether.rcv_packet" => "float" }
      convert => { "ether.trans_size" => "float" }
      convert => { "ether.trans_packet" => "float" }
      convert => { "infini.tcp_rcv" => "float" }
      convert => { "infini.tcp_tran" => "float" }
      convert => { "infini.rds_rcv" => "float" }
      convert => { "infini.rds_tran" => "float" }
      convert => { "infini.rds_tran" => "float" }
      convert => { "infini.total_rcv" => "float" }
      convert => { "infini.total_tran" => "float" }
      convert => { "cell.io.total" => "float" }
      convert => { "cell.io.disk.read" => "float" }
      convert => { "cell.io.disk.write" => "float" }
      convert => { "cell.io.disk.avg" => "float" }
      convert => { "cell.io.disk.max" => "float" }
      convert => { "cell.io.disk.tps" => "float" }
      convert => { "cell.io.disk.svctm" => "float" }
      convert => { "cell.io.flash.read" => "float" }
      convert => { "cell.io.flash.write" => "float" }
      convert => { "cell.io.flash.avg" => "float" }
      convert => { "cell.io.flash.max" => "float" }
      convert => { "cell.io.flash.tps" => "float" }
      convert => { "cell.io.flash.svctm" => "float" }
      convert => { "cell.cpu" => "float" }
      convert => { "cell.infini.rcv" => "float" }
      convert => { "cell.infini.tran" => "float" }
      add_field => { "timestamp" => "%{logtime}" }
      remove_field => [ "message","source","beat","tags","host" ]
    }
#   mutate {
#        add_field => { "timestamp" => "%{logtime}" }
#    }

    date {
        match => [ "timestamp","E MMM d HH:mm:ss 'KST' yyyy" ]
        target => "@timestamp"
        timezone => "Asia/Seoul"
    }
  }
}
